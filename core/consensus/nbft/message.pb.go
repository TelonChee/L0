// Copyright (C) 2017, Beijing Bochen Technology Co.,Ltd.  All rights reserved.
//
// This file is part of L0
// 
// The L0 is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// The L0 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// 
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package nbft is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Request
	PrePrepare
	Prepare
	Commit
	Committed
	FetchCommitted
	ReturnCommitted
	NbftMessage
*/
package nbft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Time        int64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Transaction []byte `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	FromChain   string `protobuf:"bytes,3,opt,name=fromChain" json:"fromChain,omitempty"`
	ToChain     string `protobuf:"bytes,4,opt,name=toChain" json:"toChain,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Request) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *Request) GetFromChain() string {
	if m != nil {
		return m.FromChain
	}
	return ""
}

func (m *Request) GetToChain() string {
	if m != nil {
		return m.ToChain
	}
	return ""
}

type PrePrepare struct {
	ReplicaID string     `protobuf:"bytes,1,opt,name=replicaID" json:"replicaID,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Chain     string     `protobuf:"bytes,3,opt,name=chain" json:"chain,omitempty"`
	Quorum    uint64     `protobuf:"varint,4,opt,name=quorum" json:"quorum,omitempty"`
	Digest    string     `protobuf:"bytes,5,opt,name=digest" json:"digest,omitempty"`
	Chains    []string   `protobuf:"bytes,6,rep,name=chains" json:"chains,omitempty"`
	Requests  []*Request `protobuf:"bytes,7,rep,name=requests" json:"requests,omitempty"`
}

func (m *PrePrepare) Reset()                    { *m = PrePrepare{} }
func (m *PrePrepare) String() string            { return proto.CompactTextString(m) }
func (*PrePrepare) ProtoMessage()               {}
func (*PrePrepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PrePrepare) GetReplicaID() string {
	if m != nil {
		return m.ReplicaID
	}
	return ""
}

func (m *PrePrepare) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrePrepare) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *PrePrepare) GetQuorum() uint64 {
	if m != nil {
		return m.Quorum
	}
	return 0
}

func (m *PrePrepare) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *PrePrepare) GetChains() []string {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *PrePrepare) GetRequests() []*Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

type Prepare struct {
	ReplicaID string `protobuf:"bytes,1,opt,name=replicaID" json:"replicaID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Chain     string `protobuf:"bytes,3,opt,name=chain" json:"chain,omitempty"`
	Quorum    uint64 `protobuf:"varint,4,opt,name=quorum" json:"quorum,omitempty"`
	Digest    string `protobuf:"bytes,5,opt,name=digest" json:"digest,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Prepare) GetReplicaID() string {
	if m != nil {
		return m.ReplicaID
	}
	return ""
}

func (m *Prepare) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Prepare) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Prepare) GetQuorum() uint64 {
	if m != nil {
		return m.Quorum
	}
	return 0
}

func (m *Prepare) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type Commit struct {
	ReplicaID string `protobuf:"bytes,1,opt,name=replicaID" json:"replicaID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Chain     string `protobuf:"bytes,3,opt,name=chain" json:"chain,omitempty"`
	Quorum    uint64 `protobuf:"varint,4,opt,name=quorum" json:"quorum,omitempty"`
	Digest    string `protobuf:"bytes,5,opt,name=digest" json:"digest,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Commit) GetReplicaID() string {
	if m != nil {
		return m.ReplicaID
	}
	return ""
}

func (m *Commit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Commit) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Commit) GetQuorum() uint64 {
	if m != nil {
		return m.Quorum
	}
	return 0
}

func (m *Commit) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type Committed struct {
	Key      string     `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Requests []*Request `protobuf:"bytes,2,rep,name=requests" json:"requests,omitempty"`
}

func (m *Committed) Reset()                    { *m = Committed{} }
func (m *Committed) String() string            { return proto.CompactTextString(m) }
func (*Committed) ProtoMessage()               {}
func (*Committed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Committed) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Committed) GetRequests() []*Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

type FetchCommitted struct {
	ReplicaID string `protobuf:"bytes,1,opt,name=replicaID" json:"replicaID,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *FetchCommitted) Reset()                    { *m = FetchCommitted{} }
func (m *FetchCommitted) String() string            { return proto.CompactTextString(m) }
func (*FetchCommitted) ProtoMessage()               {}
func (*FetchCommitted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FetchCommitted) GetReplicaID() string {
	if m != nil {
		return m.ReplicaID
	}
	return ""
}

func (m *FetchCommitted) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ReturnCommitted struct {
	ReplicaID string     `protobuf:"bytes,1,opt,name=replicaID" json:"replicaID,omitempty"`
	Committed *Committed `protobuf:"bytes,2,opt,name=committed" json:"committed,omitempty"`
}

func (m *ReturnCommitted) Reset()                    { *m = ReturnCommitted{} }
func (m *ReturnCommitted) String() string            { return proto.CompactTextString(m) }
func (*ReturnCommitted) ProtoMessage()               {}
func (*ReturnCommitted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReturnCommitted) GetReplicaID() string {
	if m != nil {
		return m.ReplicaID
	}
	return ""
}

func (m *ReturnCommitted) GetCommitted() *Committed {
	if m != nil {
		return m.Committed
	}
	return nil
}

type NbftMessage struct {
	// Types that are valid to be assigned to Payload:
	//	*NbftMessage_Request
	//	*NbftMessage_Preprepare
	//	*NbftMessage_Prepare
	//	*NbftMessage_Commit
	//	*NbftMessage_Committed
	//	*NbftMessage_FetchCommitted
	//	*NbftMessage_ReturnCommitted
	Payload isNbftMessage_Payload `protobuf_oneof:"payload"`
}

func (m *NbftMessage) Reset()                    { *m = NbftMessage{} }
func (m *NbftMessage) String() string            { return proto.CompactTextString(m) }
func (*NbftMessage) ProtoMessage()               {}
func (*NbftMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isNbftMessage_Payload interface {
	isNbftMessage_Payload()
}

type NbftMessage_Request struct {
	Request *Request `protobuf:"bytes,1,opt,name=request,oneof"`
}
type NbftMessage_Preprepare struct {
	Preprepare *PrePrepare `protobuf:"bytes,2,opt,name=preprepare,oneof"`
}
type NbftMessage_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,3,opt,name=prepare,oneof"`
}
type NbftMessage_Commit struct {
	Commit *Commit `protobuf:"bytes,4,opt,name=commit,oneof"`
}
type NbftMessage_Committed struct {
	Committed *Committed `protobuf:"bytes,5,opt,name=committed,oneof"`
}
type NbftMessage_FetchCommitted struct {
	FetchCommitted *FetchCommitted `protobuf:"bytes,6,opt,name=fetchCommitted,oneof"`
}
type NbftMessage_ReturnCommitted struct {
	ReturnCommitted *ReturnCommitted `protobuf:"bytes,7,opt,name=returnCommitted,oneof"`
}

func (*NbftMessage_Request) isNbftMessage_Payload()         {}
func (*NbftMessage_Preprepare) isNbftMessage_Payload()      {}
func (*NbftMessage_Prepare) isNbftMessage_Payload()         {}
func (*NbftMessage_Commit) isNbftMessage_Payload()          {}
func (*NbftMessage_Committed) isNbftMessage_Payload()       {}
func (*NbftMessage_FetchCommitted) isNbftMessage_Payload()  {}
func (*NbftMessage_ReturnCommitted) isNbftMessage_Payload() {}

func (m *NbftMessage) GetPayload() isNbftMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *NbftMessage) GetRequest() *Request {
	if x, ok := m.GetPayload().(*NbftMessage_Request); ok {
		return x.Request
	}
	return nil
}

func (m *NbftMessage) GetPreprepare() *PrePrepare {
	if x, ok := m.GetPayload().(*NbftMessage_Preprepare); ok {
		return x.Preprepare
	}
	return nil
}

func (m *NbftMessage) GetPrepare() *Prepare {
	if x, ok := m.GetPayload().(*NbftMessage_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *NbftMessage) GetCommit() *Commit {
	if x, ok := m.GetPayload().(*NbftMessage_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *NbftMessage) GetCommitted() *Committed {
	if x, ok := m.GetPayload().(*NbftMessage_Committed); ok {
		return x.Committed
	}
	return nil
}

func (m *NbftMessage) GetFetchCommitted() *FetchCommitted {
	if x, ok := m.GetPayload().(*NbftMessage_FetchCommitted); ok {
		return x.FetchCommitted
	}
	return nil
}

func (m *NbftMessage) GetReturnCommitted() *ReturnCommitted {
	if x, ok := m.GetPayload().(*NbftMessage_ReturnCommitted); ok {
		return x.ReturnCommitted
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NbftMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NbftMessage_OneofMarshaler, _NbftMessage_OneofUnmarshaler, _NbftMessage_OneofSizer, []interface{}{
		(*NbftMessage_Request)(nil),
		(*NbftMessage_Preprepare)(nil),
		(*NbftMessage_Prepare)(nil),
		(*NbftMessage_Commit)(nil),
		(*NbftMessage_Committed)(nil),
		(*NbftMessage_FetchCommitted)(nil),
		(*NbftMessage_ReturnCommitted)(nil),
	}
}

func _NbftMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NbftMessage)
	// payload
	switch x := m.Payload.(type) {
	case *NbftMessage_Request:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *NbftMessage_Preprepare:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Preprepare); err != nil {
			return err
		}
	case *NbftMessage_Prepare:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *NbftMessage_Commit:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *NbftMessage_Committed:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Committed); err != nil {
			return err
		}
	case *NbftMessage_FetchCommitted:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FetchCommitted); err != nil {
			return err
		}
	case *NbftMessage_ReturnCommitted:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReturnCommitted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NbftMessage.Payload has unexpected type %T", x)
	}
	return nil
}

func _NbftMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NbftMessage)
	switch tag {
	case 1: // payload.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Request)
		err := b.DecodeMessage(msg)
		m.Payload = &NbftMessage_Request{msg}
		return true, err
	case 2: // payload.preprepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrePrepare)
		err := b.DecodeMessage(msg)
		m.Payload = &NbftMessage_Preprepare{msg}
		return true, err
	case 3: // payload.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.Payload = &NbftMessage_Prepare{msg}
		return true, err
	case 4: // payload.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Commit)
		err := b.DecodeMessage(msg)
		m.Payload = &NbftMessage_Commit{msg}
		return true, err
	case 5: // payload.committed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Committed)
		err := b.DecodeMessage(msg)
		m.Payload = &NbftMessage_Committed{msg}
		return true, err
	case 6: // payload.fetchCommitted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchCommitted)
		err := b.DecodeMessage(msg)
		m.Payload = &NbftMessage_FetchCommitted{msg}
		return true, err
	case 7: // payload.returnCommitted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReturnCommitted)
		err := b.DecodeMessage(msg)
		m.Payload = &NbftMessage_ReturnCommitted{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NbftMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NbftMessage)
	// payload
	switch x := m.Payload.(type) {
	case *NbftMessage_Request:
		s := proto.Size(x.Request)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NbftMessage_Preprepare:
		s := proto.Size(x.Preprepare)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NbftMessage_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NbftMessage_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NbftMessage_Committed:
		s := proto.Size(x.Committed)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NbftMessage_FetchCommitted:
		s := proto.Size(x.FetchCommitted)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NbftMessage_ReturnCommitted:
		s := proto.Size(x.ReturnCommitted)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Request)(nil), "nbft.Request")
	proto.RegisterType((*PrePrepare)(nil), "nbft.PrePrepare")
	proto.RegisterType((*Prepare)(nil), "nbft.Prepare")
	proto.RegisterType((*Commit)(nil), "nbft.Commit")
	proto.RegisterType((*Committed)(nil), "nbft.Committed")
	proto.RegisterType((*FetchCommitted)(nil), "nbft.FetchCommitted")
	proto.RegisterType((*ReturnCommitted)(nil), "nbft.ReturnCommitted")
	proto.RegisterType((*NbftMessage)(nil), "nbft.NbftMessage")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xb5, 0xe3, 0xc4, 0xc6, 0xe3, 0xb6, 0xa9, 0x46, 0x05, 0xed, 0x81, 0x83, 0xe5, 0x03, 0x4a,
	0x0f, 0x04, 0x29, 0xdc, 0x11, 0x50, 0x84, 0xcc, 0x01, 0x54, 0xed, 0x0f, 0x40, 0xda, 0x38, 0x93,
	0xd6, 0xa2, 0xfe, 0xe8, 0x7a, 0x23, 0xd4, 0x1b, 0xfc, 0x3a, 0xfe, 0x15, 0x42, 0xde, 0x5d, 0xc7,
	0x76, 0x84, 0xaa, 0xde, 0x72, 0xdb, 0x99, 0x79, 0xf3, 0xe6, 0xbd, 0x99, 0x38, 0x70, 0x5a, 0x50,
	0xd3, 0x88, 0x1b, 0x5a, 0xd6, 0xb2, 0x52, 0x15, 0x4e, 0xcb, 0xf5, 0x56, 0x25, 0x3f, 0x21, 0xe0,
	0x74, 0xbf, 0xa3, 0x46, 0x21, 0xc2, 0x54, 0xe5, 0x05, 0x31, 0x37, 0x76, 0x17, 0x1e, 0xd7, 0x6f,
	0x8c, 0x21, 0x52, 0x52, 0x94, 0x8d, 0xc8, 0x54, 0x5e, 0x95, 0x6c, 0x12, 0xbb, 0x8b, 0x13, 0x3e,
	0x4c, 0xe1, 0x4b, 0x08, 0xb7, 0xb2, 0x2a, 0xae, 0x6e, 0x45, 0x5e, 0x32, 0x2f, 0x76, 0x17, 0x21,
	0xef, 0x13, 0xc8, 0x20, 0x50, 0x95, 0xa9, 0x4d, 0x75, 0xad, 0x0b, 0x93, 0x3f, 0x2e, 0xc0, 0xb5,
	0xa4, 0x6b, 0x49, 0xb5, 0x90, 0xd4, 0xd2, 0x48, 0xaa, 0xef, 0xf2, 0x4c, 0x7c, 0xf9, 0xa4, 0x15,
	0x84, 0xbc, 0x4f, 0xb4, 0xd2, 0x4a, 0x51, 0x90, 0x9e, 0x1f, 0x72, 0xfd, 0xc6, 0x0b, 0x98, 0x65,
	0x83, 0xa1, 0x26, 0xc0, 0x17, 0xe0, 0xdf, 0xef, 0x2a, 0xb9, 0x2b, 0xf4, 0xbc, 0x29, 0xb7, 0x51,
	0x9b, 0xdf, 0xe4, 0x37, 0xd4, 0x28, 0x36, 0xd3, 0x70, 0x1b, 0xb5, 0x79, 0xdd, 0xd8, 0x30, 0x3f,
	0xf6, 0xda, 0xbc, 0x89, 0xf0, 0x12, 0x9e, 0x49, 0xb3, 0x97, 0x86, 0x05, 0xb1, 0xb7, 0x88, 0x56,
	0xa7, 0xcb, 0x76, 0x61, 0x4b, 0xbb, 0x2d, 0xbe, 0x2f, 0x27, 0xbf, 0x5d, 0x08, 0x8e, 0x6c, 0x23,
	0xf9, 0xe5, 0x82, 0x7f, 0x55, 0x15, 0x45, 0xae, 0x8e, 0x26, 0x21, 0x85, 0xd0, 0x28, 0x50, 0xb4,
	0xc1, 0x73, 0xf0, 0x7e, 0xd0, 0x83, 0x1d, 0xdf, 0x3e, 0x47, 0x0b, 0x9d, 0x3c, 0xbe, 0xd0, 0xf7,
	0x70, 0xf6, 0x99, 0x54, 0x76, 0xdb, 0xd3, 0x3d, 0xee, 0xc9, 0x0e, 0x9b, 0xec, 0x87, 0x25, 0xdf,
	0x61, 0xce, 0x49, 0xed, 0x64, 0xf9, 0x54, 0x8a, 0xd7, 0x10, 0x66, 0x1d, 0x54, 0x13, 0x45, 0xab,
	0xb9, 0x91, 0xb7, 0x67, 0xe0, 0x3d, 0x22, 0xf9, 0x3b, 0x81, 0xe8, 0xdb, 0x7a, 0xab, 0xbe, 0x9a,
	0x2f, 0x0a, 0x2f, 0x21, 0xb0, 0xea, 0x35, 0xf5, 0xa1, 0xb7, 0xd4, 0xe1, 0x5d, 0x1d, 0x57, 0x00,
	0xb5, 0xa4, 0xda, 0xfc, 0x5e, 0xec, 0xa8, 0x73, 0x83, 0xee, 0x3f, 0x87, 0xd4, 0xe1, 0x03, 0x54,
	0x4b, 0xdf, 0x35, 0x78, 0x43, 0xfa, 0x1e, 0xdd, 0xd5, 0xf1, 0x15, 0xf8, 0x46, 0xa6, 0xbe, 0x5a,
	0xb4, 0x3a, 0x19, 0xba, 0x48, 0x1d, 0x6e, 0xab, 0xf8, 0x66, 0x68, 0x78, 0xf6, 0x5f, 0xc3, 0xa9,
	0x33, 0xb0, 0x8c, 0xef, 0xe0, 0x6c, 0x3b, 0x3a, 0x0a, 0xf3, 0x75, 0xd7, 0x85, 0xe9, 0x1a, 0x1f,
	0x2c, 0x75, 0xf8, 0x01, 0x1a, 0x3f, 0xc0, 0x5c, 0x8e, 0x4f, 0xc2, 0x02, 0x4d, 0xf0, 0xbc, 0x5b,
	0xd5, 0xa8, 0x98, 0x3a, 0xfc, 0x10, 0xff, 0x31, 0x84, 0xa0, 0x16, 0x0f, 0x77, 0x95, 0xd8, 0xac,
	0x7d, 0xfd, 0x1f, 0xf6, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0xc7, 0x42, 0xc5, 0xd4,
	0x04, 0x00, 0x00,
}
